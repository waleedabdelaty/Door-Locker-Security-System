
Final_Project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000235c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000235c  000023f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800074  00800074  00002404  2**0
                  ALLOC
  3 .stab         0000249c  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121a  00000000  00000000  000048a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000079b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000889e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000964c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000097ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a207  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void timer0_isr_fn(void);

volatile int quarter_sec=0;


int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	eb 97       	sbiw	r28, 0x3b	; 59
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 P_W[4];
	uint8 check[4];
	Timer0_setCallBack(timer0_isr_fn);
     b5a:	8c ec       	ldi	r24, 0xCC	; 204
     b5c:	99 e0       	ldi	r25, 0x09	; 9
     b5e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <Timer0_setCallBack>
	buzzer_init();
     b62:	0e 94 0d 0a 	call	0x141a	; 0x141a <buzzer_init>
	EEPROM_init();
     b66:	0e 94 45 0a 	call	0x148a	; 0x148a <EEPROM_init>
	MOTOR_init();
     b6a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <MOTOR_init>
	UART_Config UConfig = {ASYNCH,ENABLED_EVEN,BIT_1};
     b6e:	ce 01       	movw	r24, r28
     b70:	89 96       	adiw	r24, 0x29	; 41
     b72:	9b ab       	std	Y+51, r25	; 0x33
     b74:	8a ab       	std	Y+50, r24	; 0x32
     b76:	ee e6       	ldi	r30, 0x6E	; 110
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	fd ab       	std	Y+53, r31	; 0x35
     b7c:	ec ab       	std	Y+52, r30	; 0x34
     b7e:	f3 e0       	ldi	r31, 0x03	; 3
     b80:	fe ab       	std	Y+54, r31	; 0x36
     b82:	ec a9       	ldd	r30, Y+52	; 0x34
     b84:	fd a9       	ldd	r31, Y+53	; 0x35
     b86:	00 80       	ld	r0, Z
     b88:	8c a9       	ldd	r24, Y+52	; 0x34
     b8a:	9d a9       	ldd	r25, Y+53	; 0x35
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	9d ab       	std	Y+53, r25	; 0x35
     b90:	8c ab       	std	Y+52, r24	; 0x34
     b92:	ea a9       	ldd	r30, Y+50	; 0x32
     b94:	fb a9       	ldd	r31, Y+51	; 0x33
     b96:	00 82       	st	Z, r0
     b98:	8a a9       	ldd	r24, Y+50	; 0x32
     b9a:	9b a9       	ldd	r25, Y+51	; 0x33
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	9b ab       	std	Y+51, r25	; 0x33
     ba0:	8a ab       	std	Y+50, r24	; 0x32
     ba2:	9e a9       	ldd	r25, Y+54	; 0x36
     ba4:	91 50       	subi	r25, 0x01	; 1
     ba6:	9e ab       	std	Y+54, r25	; 0x36
     ba8:	ee a9       	ldd	r30, Y+54	; 0x36
     baa:	ee 23       	and	r30, r30
     bac:	51 f7       	brne	.-44     	; 0xb82 <main+0x3c>
	UART_init(&UConfig);
     bae:	ce 01       	movw	r24, r28
     bb0:	89 96       	adiw	r24, 0x29	; 41
     bb2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <UART_init>

	TimerConfig T0_Configuration={NORMAL,F_CPU_1024,0,7813};
     bb6:	ce 01       	movw	r24, r28
     bb8:	8c 96       	adiw	r24, 0x2c	; 44
     bba:	98 af       	std	Y+56, r25	; 0x38
     bbc:	8f ab       	std	Y+55, r24	; 0x37
     bbe:	e8 e6       	ldi	r30, 0x68	; 104
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	fa af       	std	Y+58, r31	; 0x3a
     bc4:	e9 af       	std	Y+57, r30	; 0x39
     bc6:	f6 e0       	ldi	r31, 0x06	; 6
     bc8:	fb af       	std	Y+59, r31	; 0x3b
     bca:	e9 ad       	ldd	r30, Y+57	; 0x39
     bcc:	fa ad       	ldd	r31, Y+58	; 0x3a
     bce:	00 80       	ld	r0, Z
     bd0:	89 ad       	ldd	r24, Y+57	; 0x39
     bd2:	9a ad       	ldd	r25, Y+58	; 0x3a
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	9a af       	std	Y+58, r25	; 0x3a
     bd8:	89 af       	std	Y+57, r24	; 0x39
     bda:	ef a9       	ldd	r30, Y+55	; 0x37
     bdc:	f8 ad       	ldd	r31, Y+56	; 0x38
     bde:	00 82       	st	Z, r0
     be0:	8f a9       	ldd	r24, Y+55	; 0x37
     be2:	98 ad       	ldd	r25, Y+56	; 0x38
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	98 af       	std	Y+56, r25	; 0x38
     be8:	8f ab       	std	Y+55, r24	; 0x37
     bea:	9b ad       	ldd	r25, Y+59	; 0x3b
     bec:	91 50       	subi	r25, 0x01	; 1
     bee:	9b af       	std	Y+59, r25	; 0x3b
     bf0:	eb ad       	ldd	r30, Y+59	; 0x3b
     bf2:	ee 23       	and	r30, r30
     bf4:	51 f7       	brne	.-44     	; 0xbca <main+0x84>
	Timer0_init(&T0_Configuration); 			 //Initialize timer0
     bf6:	ce 01       	movw	r24, r28
     bf8:	8c 96       	adiw	r24, 0x2c	; 44
     bfa:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <Timer0_init>
	SREG |= (1<<7);
     bfe:	af e5       	ldi	r26, 0x5F	; 95
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ef e5       	ldi	r30, 0x5F	; 95
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24

	// get pass and check it
	do{
		RECEIVE_PW( P_W );        	// RECIEVE FIRST PW USER SENDS
     c0c:	ce 01       	movw	r24, r28
     c0e:	81 96       	adiw	r24, 0x21	; 33
     c10:	0e 94 03 08 	call	0x1006	; 0x1006 <RECEIVE_PW>
		RECEIVE_PW( check );        // RECIEVE VERIFYING PW USER SENDS
     c14:	ce 01       	movw	r24, r28
     c16:	85 96       	adiw	r24, 0x25	; 37
     c18:	0e 94 03 08 	call	0x1006	; 0x1006 <RECEIVE_PW>
		VERIFY_PW (P_W,check);		//CHECK IF PW'S SENT FROM THE HMI MATCH
     c1c:	ce 01       	movw	r24, r28
     c1e:	81 96       	adiw	r24, 0x21	; 33
     c20:	9e 01       	movw	r18, r28
     c22:	2b 5d       	subi	r18, 0xDB	; 219
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	b9 01       	movw	r22, r18
     c28:	0e 94 a2 08 	call	0x1144	; 0x1144 <VERIFY_PW>
	}while (Valid == 0);
     c2c:	80 91 84 00 	lds	r24, 0x0084
     c30:	88 23       	and	r24, r24
     c32:	61 f3       	breq	.-40     	; 0xc0c <main+0xc6>


	while(1){
		uint8 command=UART_receiveByte();
     c34:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <UART_receiveByte>
     c38:	88 a3       	std	Y+32, r24	; 0x20
		if(command== '-')
     c3a:	88 a1       	ldd	r24, Y+32	; 0x20
     c3c:	8d 32       	cpi	r24, 0x2D	; 45
     c3e:	a1 f4       	brne	.+40     	; 0xc68 <main+0x122>
		{
			do{
					RECEIVE_PW( P_W );        	// RECIEVE FIRST PW USER SENDS
     c40:	ce 01       	movw	r24, r28
     c42:	81 96       	adiw	r24, 0x21	; 33
     c44:	0e 94 03 08 	call	0x1006	; 0x1006 <RECEIVE_PW>
					RECEIVE_PW( check );        // RECIEVE VERIFYING PW USER SENDS
     c48:	ce 01       	movw	r24, r28
     c4a:	85 96       	adiw	r24, 0x25	; 37
     c4c:	0e 94 03 08 	call	0x1006	; 0x1006 <RECEIVE_PW>
					VERIFY_PW (P_W,check);		//CHECK IF PW'S SENT FROM THE HMI MATCH
     c50:	ce 01       	movw	r24, r28
     c52:	81 96       	adiw	r24, 0x21	; 33
     c54:	9e 01       	movw	r18, r28
     c56:	2b 5d       	subi	r18, 0xDB	; 219
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	b9 01       	movw	r22, r18
     c5c:	0e 94 a2 08 	call	0x1144	; 0x1144 <VERIFY_PW>
			    }while (Valid == 0);
     c60:	80 91 84 00 	lds	r24, 0x0084
     c64:	88 23       	and	r24, r24
     c66:	61 f3       	breq	.-40     	; 0xc40 <main+0xfa>
		}

		// SAVE PASS IN EEPROM
		for(uint8 i=0;i<4;i++)
     c68:	1f 8e       	std	Y+31, r1	; 0x1f
     c6a:	88 c0       	rjmp	.+272    	; 0xd7c <main+0x236>
		{
			EEPROM_writeByte((0X0090+i), P_W[i]);
     c6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	80 57       	subi	r24, 0x70	; 112
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	ac 01       	movw	r20, r24
     c78:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	ce 01       	movw	r24, r28
     c80:	81 96       	adiw	r24, 0x21	; 33
     c82:	fc 01       	movw	r30, r24
     c84:	e2 0f       	add	r30, r18
     c86:	f3 1f       	adc	r31, r19
     c88:	20 81       	ld	r18, Z
     c8a:	ca 01       	movw	r24, r20
     c8c:	62 2f       	mov	r22, r18
     c8e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <EEPROM_writeByte>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a2 e0       	ldi	r26, 0x02	; 2
     c98:	b3 e4       	ldi	r27, 0x43	; 67
     c9a:	89 8f       	std	Y+25, r24	; 0x19
     c9c:	9a 8f       	std	Y+26, r25	; 0x1a
     c9e:	ab 8f       	std	Y+27, r26	; 0x1b
     ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca2:	69 8d       	ldd	r22, Y+25	; 0x19
     ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	53 e4       	ldi	r21, 0x43	; 67
     cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8d 8b       	std	Y+21, r24	; 0x15
     cbc:	9e 8b       	std	Y+22, r25	; 0x16
     cbe:	af 8b       	std	Y+23, r26	; 0x17
     cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cc2:	6d 89       	ldd	r22, Y+21	; 0x15
     cc4:	7e 89       	ldd	r23, Y+22	; 0x16
     cc6:	8f 89       	ldd	r24, Y+23	; 0x17
     cc8:	98 8d       	ldd	r25, Y+24	; 0x18
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	2c f4       	brge	.+10     	; 0xce4 <main+0x19e>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c 8b       	std	Y+20, r25	; 0x14
     ce0:	8b 8b       	std	Y+19, r24	; 0x13
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <main+0x21c>
	else if (__tmp > 65535)
     ce4:	6d 89       	ldd	r22, Y+21	; 0x15
     ce6:	7e 89       	ldd	r23, Y+22	; 0x16
     ce8:	8f 89       	ldd	r24, Y+23	; 0x17
     cea:	98 8d       	ldd	r25, Y+24	; 0x18
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	4c f5       	brge	.+82     	; 0xd4e <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfc:	69 8d       	ldd	r22, Y+25	; 0x19
     cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9c 8b       	std	Y+20, r25	; 0x14
     d22:	8b 8b       	std	Y+19, r24	; 0x13
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <main+0x1fe>
     d26:	89 e1       	ldi	r24, 0x19	; 25
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 8b       	std	Y+18, r25	; 0x12
     d2c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2e:	89 89       	ldd	r24, Y+17	; 0x11
     d30:	9a 89       	ldd	r25, Y+18	; 0x12
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <main+0x1ec>
     d36:	9a 8b       	std	Y+18, r25	; 0x12
     d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	8b 89       	ldd	r24, Y+19	; 0x13
     d3c:	9c 89       	ldd	r25, Y+20	; 0x14
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	9c 89       	ldd	r25, Y+20	; 0x14
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <main+0x1e0>
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <main+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6d 89       	ldd	r22, Y+21	; 0x15
     d50:	7e 89       	ldd	r23, Y+22	; 0x16
     d52:	8f 89       	ldd	r24, Y+23	; 0x17
     d54:	98 8d       	ldd	r25, Y+24	; 0x18
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9c 8b       	std	Y+20, r25	; 0x14
     d60:	8b 8b       	std	Y+19, r24	; 0x13
     d62:	8b 89       	ldd	r24, Y+19	; 0x13
     d64:	9c 89       	ldd	r25, Y+20	; 0x14
     d66:	98 8b       	std	Y+16, r25	; 0x10
     d68:	8f 87       	std	Y+15, r24	; 0x0f
     d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6c:	98 89       	ldd	r25, Y+16	; 0x10
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x228>
     d72:	98 8b       	std	Y+16, r25	; 0x10
     d74:	8f 87       	std	Y+15, r24	; 0x0f
					VERIFY_PW (P_W,check);		//CHECK IF PW'S SENT FROM THE HMI MATCH
			    }while (Valid == 0);
		}

		// SAVE PASS IN EEPROM
		for(uint8 i=0;i<4;i++)
     d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	8f 8f       	std	Y+31, r24	; 0x1f
     d7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d7e:	84 30       	cpi	r24, 0x04	; 4
     d80:	08 f4       	brcc	.+2      	; 0xd84 <main+0x23e>
     d82:	74 cf       	rjmp	.-280    	; 0xc6c <main+0x126>
		{
			EEPROM_writeByte((0X0090+i), P_W[i]);
			_delay_ms(DELAY_UART);
		}
		if(command== '+'){
     d84:	88 a1       	ldd	r24, Y+32	; 0x20
     d86:	8b 32       	cpi	r24, 0x2B	; 43
     d88:	09 f0       	breq	.+2      	; 0xd8c <main+0x246>
     d8a:	54 cf       	rjmp	.-344    	; 0xc34 <main+0xee>

			/* GET PASSWORD IN EEPROM AND SAVE IT IN A VARIABLE TO CHECK PW USER SENT */
			for (uint8 i = 0; i < 4; i++)
     d8c:	1d 8e       	std	Y+29, r1	; 0x1d
     d8e:	87 c0       	rjmp	.+270    	; 0xe9e <main+0x358>
			{
				EEPROM_readByte( (0x0090 + i), (P_W+i));
     d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	80 57       	subi	r24, 0x70	; 112
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	ac 01       	movw	r20, r24
     d9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9e 01       	movw	r18, r28
     da4:	2f 5d       	subi	r18, 0xDF	; 223
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	28 0f       	add	r18, r24
     daa:	39 1f       	adc	r19, r25
     dac:	ca 01       	movw	r24, r20
     dae:	b9 01       	movw	r22, r18
     db0:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_readByte>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a8 ec       	ldi	r26, 0xC8	; 200
     dba:	b2 e4       	ldi	r27, 0x42	; 66
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	ad 87       	std	Y+13, r26	; 0x0d
     dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a e7       	ldi	r20, 0x7A	; 122
     dd2:	53 e4       	ldi	r21, 0x43	; 67
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8f 83       	std	Y+7, r24	; 0x07
     dde:	98 87       	std	Y+8, r25	; 0x08
     de0:	a9 87       	std	Y+9, r26	; 0x09
     de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <main+0x2c0>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <main+0x33e>
	else if (__tmp > 65535)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <main+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <main+0x320>
     e48:	89 e1       	ldi	r24, 0x19	; 25
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <main+0x30e>
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <main+0x302>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <main+0x34a>
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(DELAY_UART);
		}
		if(command== '+'){

			/* GET PASSWORD IN EEPROM AND SAVE IT IN A VARIABLE TO CHECK PW USER SENT */
			for (uint8 i = 0; i < 4; i++)
     e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	8d 8f       	std	Y+29, r24	; 0x1d
     e9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <main+0x360>
     ea4:	75 cf       	rjmp	.-278    	; 0xd90 <main+0x24a>
			{
				EEPROM_readByte( (0x0090 + i), (P_W+i));
				_delay_ms(100);
			}
			// the user 3 chance for password
			uint8 count=0;
     ea6:	1e 8e       	std	Y+30, r1	; 0x1e
			do{
				count++;
     ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	8e 8f       	std	Y+30, r24	; 0x1e
				RECEIVE_PW( check );        			// RECIEVE PW USER SENDS WE WANT TO CHECK
     eae:	ce 01       	movw	r24, r28
     eb0:	85 96       	adiw	r24, 0x25	; 37
     eb2:	0e 94 03 08 	call	0x1006	; 0x1006 <RECEIVE_PW>
				VERIFY_PW (P_W,check);					//CHECK IF PW USER SENT IS CORRECT
     eb6:	ce 01       	movw	r24, r28
     eb8:	81 96       	adiw	r24, 0x21	; 33
     eba:	9e 01       	movw	r18, r28
     ebc:	2b 5d       	subi	r18, 0xDB	; 219
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	b9 01       	movw	r22, r18
     ec2:	0e 94 a2 08 	call	0x1144	; 0x1144 <VERIFY_PW>
			} while(Valid == 0 && count<3);
     ec6:	80 91 84 00 	lds	r24, 0x0084
     eca:	88 23       	and	r24, r24
     ecc:	19 f4       	brne	.+6      	; 0xed4 <main+0x38e>
     ece:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	50 f3       	brcs	.-44     	; 0xea8 <main+0x362>

			if(Valid){
     ed4:	80 91 84 00 	lds	r24, 0x0084
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <main+0x398>
     edc:	6b c0       	rjmp	.+214    	; 0xfb4 <main+0x46e>
				SECONDS_T0_MC2 = 0;
     ede:	10 92 7e 00 	sts	0x007E, r1
     ee2:	10 92 7f 00 	sts	0x007F, r1
     ee6:	10 92 80 00 	sts	0x0080, r1
     eea:	10 92 81 00 	sts	0x0081, r1
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <main+0x3c6>
				while ( SECONDS_T0_MC2 <= 15)   { 	MOTOR_clockw;       }
     ef0:	a5 e3       	ldi	r26, 0x35	; 53
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e3       	ldi	r30, 0x35	; 53
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 62       	ori	r24, 0x20	; 32
     efc:	8c 93       	st	X, r24
     efe:	a5 e3       	ldi	r26, 0x35	; 53
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e3       	ldi	r30, 0x35	; 53
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 7b       	andi	r24, 0xBF	; 191
     f0a:	8c 93       	st	X, r24
     f0c:	80 91 7e 00 	lds	r24, 0x007E
     f10:	90 91 7f 00 	lds	r25, 0x007F
     f14:	a0 91 80 00 	lds	r26, 0x0080
     f18:	b0 91 81 00 	lds	r27, 0x0081
     f1c:	80 31       	cpi	r24, 0x10	; 16
     f1e:	91 05       	cpc	r25, r1
     f20:	a1 05       	cpc	r26, r1
     f22:	b1 05       	cpc	r27, r1
     f24:	28 f3       	brcs	.-54     	; 0xef0 <main+0x3aa>
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <main+0x3fe>
				while ( SECONDS_T0_MC2 <= 18)	{   MOTOR_stop;			}
     f28:	a5 e3       	ldi	r26, 0x35	; 53
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e3       	ldi	r30, 0x35	; 53
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	8c 93       	st	X, r24
     f36:	a5 e3       	ldi	r26, 0x35	; 53
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e3       	ldi	r30, 0x35	; 53
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8f 7b       	andi	r24, 0xBF	; 191
     f42:	8c 93       	st	X, r24
     f44:	80 91 7e 00 	lds	r24, 0x007E
     f48:	90 91 7f 00 	lds	r25, 0x007F
     f4c:	a0 91 80 00 	lds	r26, 0x0080
     f50:	b0 91 81 00 	lds	r27, 0x0081
     f54:	83 31       	cpi	r24, 0x13	; 19
     f56:	91 05       	cpc	r25, r1
     f58:	a1 05       	cpc	r26, r1
     f5a:	b1 05       	cpc	r27, r1
     f5c:	28 f3       	brcs	.-54     	; 0xf28 <main+0x3e2>
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <main+0x436>
				while ( SECONDS_T0_MC2 <= 33)   {   MOTOR_anti_clockw;  }
     f60:	a5 e3       	ldi	r26, 0x35	; 53
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 7d       	andi	r24, 0xDF	; 223
     f6c:	8c 93       	st	X, r24
     f6e:	a5 e3       	ldi	r26, 0x35	; 53
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e3       	ldi	r30, 0x35	; 53
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	8c 93       	st	X, r24
     f7c:	80 91 7e 00 	lds	r24, 0x007E
     f80:	90 91 7f 00 	lds	r25, 0x007F
     f84:	a0 91 80 00 	lds	r26, 0x0080
     f88:	b0 91 81 00 	lds	r27, 0x0081
     f8c:	82 32       	cpi	r24, 0x22	; 34
     f8e:	91 05       	cpc	r25, r1
     f90:	a1 05       	cpc	r26, r1
     f92:	b1 05       	cpc	r27, r1
     f94:	28 f3       	brcs	.-54     	; 0xf60 <main+0x41a>
				MOTOR_stop;
     f96:	a5 e3       	ldi	r26, 0x35	; 53
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 7d       	andi	r24, 0xDF	; 223
     fa2:	8c 93       	st	X, r24
     fa4:	a5 e3       	ldi	r26, 0x35	; 53
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8f 7b       	andi	r24, 0xBF	; 191
     fb0:	8c 93       	st	X, r24
     fb2:	40 ce       	rjmp	.-896    	; 0xc34 <main+0xee>
			}
			else if(!Valid){
     fb4:	80 91 84 00 	lds	r24, 0x0084
     fb8:	88 23       	and	r24, r24
     fba:	09 f0       	breq	.+2      	; 0xfbe <main+0x478>
     fbc:	3b ce       	rjmp	.-906    	; 0xc34 <main+0xee>
				buzzer_start();
     fbe:	0e 94 28 0a 	call	0x1450	; 0x1450 <buzzer_start>
				SECONDS_T0_MC2 = 0;
     fc2:	10 92 7e 00 	sts	0x007E, r1
     fc6:	10 92 7f 00 	sts	0x007F, r1
     fca:	10 92 80 00 	sts	0x0080, r1
     fce:	10 92 81 00 	sts	0x0081, r1
				while ( SECONDS_T0_MC2 <= 60);
     fd2:	80 91 7e 00 	lds	r24, 0x007E
     fd6:	90 91 7f 00 	lds	r25, 0x007F
     fda:	a0 91 80 00 	lds	r26, 0x0080
     fde:	b0 91 81 00 	lds	r27, 0x0081
     fe2:	8d 33       	cpi	r24, 0x3D	; 61
     fe4:	91 05       	cpc	r25, r1
     fe6:	a1 05       	cpc	r26, r1
     fe8:	b1 05       	cpc	r27, r1
     fea:	98 f3       	brcs	.-26     	; 0xfd2 <main+0x48c>
				buzzer_stop();
     fec:	0e 94 39 0a 	call	0x1472	; 0x1472 <buzzer_stop>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
			}
		}

	}

}
     ff4:	eb 96       	adiw	r28, 0x3b	; 59
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <RECEIVE_PW>:



void RECEIVE_PW(uint8 PW[] )
{
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	61 97       	sbiw	r28, 0x11	; 17
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	99 8b       	std	Y+17, r25	; 0x11
    1020:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 4; i++) {
    1022:	1f 86       	std	Y+15, r1	; 0x0f
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <RECEIVE_PW+0x3e>
		PW[i]=UART_receiveByte();
    1026:	8f 85       	ldd	r24, Y+15	; 0x0f
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	88 89       	ldd	r24, Y+16	; 0x10
    102e:	99 89       	ldd	r25, Y+17	; 0x11
    1030:	8c 01       	movw	r16, r24
    1032:	02 0f       	add	r16, r18
    1034:	13 1f       	adc	r17, r19
    1036:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <UART_receiveByte>
    103a:	f8 01       	movw	r30, r16
    103c:	80 83       	st	Z, r24



void RECEIVE_PW(uint8 PW[] )
{
	for (uint8 i = 0; i < 4; i++) {
    103e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	70 f3       	brcs	.-36     	; 0x1026 <RECEIVE_PW+0x20>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a2 e0       	ldi	r26, 0x02	; 2
    1050:	b3 e4       	ldi	r27, 0x43	; 67
    1052:	8b 87       	std	Y+11, r24	; 0x0b
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	ad 87       	std	Y+13, r26	; 0x0d
    1058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	6b 85       	ldd	r22, Y+11	; 0x0b
    105c:	7c 85       	ldd	r23, Y+12	; 0x0c
    105e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1060:	9e 85       	ldd	r25, Y+14	; 0x0e
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a e7       	ldi	r20, 0x7A	; 122
    1068:	53 e4       	ldi	r21, 0x43	; 67
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8f 83       	std	Y+7, r24	; 0x07
    1074:	98 87       	std	Y+8, r25	; 0x08
    1076:	a9 87       	std	Y+9, r26	; 0x09
    1078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <RECEIVE_PW+0x96>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	3f c0       	rjmp	.+126    	; 0x111a <RECEIVE_PW+0x114>
	else if (__tmp > 65535)
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <RECEIVE_PW+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <RECEIVE_PW+0xf6>
    10de:	89 e1       	ldi	r24, 0x19	; 25
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <RECEIVE_PW+0xe4>
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <RECEIVE_PW+0xd8>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <RECEIVE_PW+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <RECEIVE_PW+0x120>
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
		PW[i]=UART_receiveByte();
	}
	_delay_ms(DELAY_UART);

}
    112e:	61 96       	adiw	r28, 0x11	; 17
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	08 95       	ret

00001144 <VERIFY_PW>:


void VERIFY_PW (uint8 PW[] , uint8 check_pw[])
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	a1 97       	sbiw	r28, 0x21	; 33
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	9f 8f       	std	Y+31, r25	; 0x1f
    115a:	8e 8f       	std	Y+30, r24	; 0x1e
    115c:	79 a3       	std	Y+33, r23	; 0x21
    115e:	68 a3       	std	Y+32, r22	; 0x20

	for (uint8 i = 0; i < 4; i++)
    1160:	1d 8e       	std	Y+29, r1	; 0x1d
    1162:	93 c0       	rjmp	.+294    	; 0x128a <VERIFY_PW+0x146>
	{
		if (PW[i] != check_pw[i])			//IF ONE CHAR IS DIFFRENT THEN PW IS INVALID
    1164:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    116c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    116e:	fc 01       	movw	r30, r24
    1170:	e2 0f       	add	r30, r18
    1172:	f3 1f       	adc	r31, r19
    1174:	40 81       	ld	r20, Z
    1176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	88 a1       	ldd	r24, Y+32	; 0x20
    117e:	99 a1       	ldd	r25, Y+33	; 0x21
    1180:	fc 01       	movw	r30, r24
    1182:	e2 0f       	add	r30, r18
    1184:	f3 1f       	adc	r31, r19
    1186:	80 81       	ld	r24, Z
    1188:	48 17       	cp	r20, r24
    118a:	09 f4       	brne	.+2      	; 0x118e <VERIFY_PW+0x4a>
    118c:	78 c0       	rjmp	.+240    	; 0x127e <VERIFY_PW+0x13a>
		{
			UART_sendByte(0);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <UART_sendByte>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a2 e0       	ldi	r26, 0x02	; 2
    119a:	b3 e4       	ldi	r27, 0x43	; 67
    119c:	89 8f       	std	Y+25, r24	; 0x19
    119e:	9a 8f       	std	Y+26, r25	; 0x1a
    11a0:	ab 8f       	std	Y+27, r26	; 0x1b
    11a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a4:	69 8d       	ldd	r22, Y+25	; 0x19
    11a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	4a e7       	ldi	r20, 0x7A	; 122
    11b2:	53 e4       	ldi	r21, 0x43	; 67
    11b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	8d 8b       	std	Y+21, r24	; 0x15
    11be:	9e 8b       	std	Y+22, r25	; 0x16
    11c0:	af 8b       	std	Y+23, r26	; 0x17
    11c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11c4:	6d 89       	ldd	r22, Y+21	; 0x15
    11c6:	7e 89       	ldd	r23, Y+22	; 0x16
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	5f e3       	ldi	r21, 0x3F	; 63
    11d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d8:	88 23       	and	r24, r24
    11da:	2c f4       	brge	.+10     	; 0x11e6 <VERIFY_PW+0xa2>
		__ticks = 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 8b       	std	Y+20, r25	; 0x14
    11e2:	8b 8b       	std	Y+19, r24	; 0x13
    11e4:	3f c0       	rjmp	.+126    	; 0x1264 <VERIFY_PW+0x120>
	else if (__tmp > 65535)
    11e6:	6d 89       	ldd	r22, Y+21	; 0x15
    11e8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ea:	8f 89       	ldd	r24, Y+23	; 0x17
    11ec:	98 8d       	ldd	r25, Y+24	; 0x18
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	3f ef       	ldi	r19, 0xFF	; 255
    11f2:	4f e7       	ldi	r20, 0x7F	; 127
    11f4:	57 e4       	ldi	r21, 0x47	; 71
    11f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fa:	18 16       	cp	r1, r24
    11fc:	4c f5       	brge	.+82     	; 0x1250 <VERIFY_PW+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e2       	ldi	r20, 0x20	; 32
    120c:	51 e4       	ldi	r21, 0x41	; 65
    120e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	9c 8b       	std	Y+20, r25	; 0x14
    1224:	8b 8b       	std	Y+19, r24	; 0x13
    1226:	0f c0       	rjmp	.+30     	; 0x1246 <VERIFY_PW+0x102>
    1228:	89 e1       	ldi	r24, 0x19	; 25
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9a 8b       	std	Y+18, r25	; 0x12
    122e:	89 8b       	std	Y+17, r24	; 0x11
    1230:	89 89       	ldd	r24, Y+17	; 0x11
    1232:	9a 89       	ldd	r25, Y+18	; 0x12
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <VERIFY_PW+0xf0>
    1238:	9a 8b       	std	Y+18, r25	; 0x12
    123a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123c:	8b 89       	ldd	r24, Y+19	; 0x13
    123e:	9c 89       	ldd	r25, Y+20	; 0x14
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1246:	8b 89       	ldd	r24, Y+19	; 0x13
    1248:	9c 89       	ldd	r25, Y+20	; 0x14
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	69 f7       	brne	.-38     	; 0x1228 <VERIFY_PW+0xe4>
    124e:	14 c0       	rjmp	.+40     	; 0x1278 <VERIFY_PW+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1250:	6d 89       	ldd	r22, Y+21	; 0x15
    1252:	7e 89       	ldd	r23, Y+22	; 0x16
    1254:	8f 89       	ldd	r24, Y+23	; 0x17
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	8b 8b       	std	Y+19, r24	; 0x13
    1264:	8b 89       	ldd	r24, Y+19	; 0x13
    1266:	9c 89       	ldd	r25, Y+20	; 0x14
    1268:	98 8b       	std	Y+16, r25	; 0x10
    126a:	8f 87       	std	Y+15, r24	; 0x0f
    126c:	8f 85       	ldd	r24, Y+15	; 0x0f
    126e:	98 89       	ldd	r25, Y+16	; 0x10
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <VERIFY_PW+0x12c>
    1274:	98 8b       	std	Y+16, r25	; 0x10
    1276:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(DELAY_UART);
			Valid=0;
    1278:	10 92 84 00 	sts	0x0084, r1
    127c:	0a c0       	rjmp	.+20     	; 0x1292 <VERIFY_PW+0x14e>
			break;
		}
		Valid=1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 84 00 	sts	0x0084, r24


void VERIFY_PW (uint8 PW[] , uint8 check_pw[])
{

	for (uint8 i = 0; i < 4; i++)
    1284:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	8d 8f       	std	Y+29, r24	; 0x1d
    128a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f4       	brcc	.+2      	; 0x1292 <VERIFY_PW+0x14e>
    1290:	69 cf       	rjmp	.-302    	; 0x1164 <VERIFY_PW+0x20>
			break;
		}
		Valid=1;
	}

	if(Valid) {	UART_sendByte(1); _delay_ms(DELAY_UART);}
    1292:	80 91 84 00 	lds	r24, 0x0084
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <VERIFY_PW+0x158>
    129a:	75 c0       	rjmp	.+234    	; 0x1386 <VERIFY_PW+0x242>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <UART_sendByte>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a2 e0       	ldi	r26, 0x02	; 2
    12a8:	b3 e4       	ldi	r27, 0x43	; 67
    12aa:	8b 87       	std	Y+11, r24	; 0x0b
    12ac:	9c 87       	std	Y+12, r25	; 0x0c
    12ae:	ad 87       	std	Y+13, r26	; 0x0d
    12b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a e7       	ldi	r20, 0x7A	; 122
    12c0:	53 e4       	ldi	r21, 0x43	; 67
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	8f 83       	std	Y+7, r24	; 0x07
    12cc:	98 87       	std	Y+8, r25	; 0x08
    12ce:	a9 87       	std	Y+9, r26	; 0x09
    12d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e6:	88 23       	and	r24, r24
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <VERIFY_PW+0x1b0>
		__ticks = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	3f c0       	rjmp	.+126    	; 0x1372 <VERIFY_PW+0x22e>
	else if (__tmp > 65535)
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	57 e4       	ldi	r21, 0x47	; 71
    1304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1308:	18 16       	cp	r1, r24
    130a:	4c f5       	brge	.+82     	; 0x135e <VERIFY_PW+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130c:	6b 85       	ldd	r22, Y+11	; 0x0b
    130e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	0f c0       	rjmp	.+30     	; 0x1354 <VERIFY_PW+0x210>
    1336:	89 e1       	ldi	r24, 0x19	; 25
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <VERIFY_PW+0x1fe>
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f7       	brne	.-38     	; 0x1336 <VERIFY_PW+0x1f2>
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <VERIFY_PW+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <VERIFY_PW+0x23a>
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
}
    1386:	a1 96       	adiw	r28, 0x21	; 33
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <timer0_isr_fn>:
void timer0_isr_fn(void)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	quarter_sec++;
    13a0:	80 91 74 00 	lds	r24, 0x0074
    13a4:	90 91 75 00 	lds	r25, 0x0075
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	90 93 75 00 	sts	0x0075, r25
    13ae:	80 93 74 00 	sts	0x0074, r24
	if(quarter_sec==30)
    13b2:	80 91 74 00 	lds	r24, 0x0074
    13b6:	90 91 75 00 	lds	r25, 0x0075
    13ba:	8e 31       	cpi	r24, 0x1E	; 30
    13bc:	91 05       	cpc	r25, r1
    13be:	51 f5       	brne	.+84     	; 0x1414 <timer0_isr_fn+0x7c>
	{
	SECONDS_T0_MC1 ++;
    13c0:	80 91 7a 00 	lds	r24, 0x007A
    13c4:	90 91 7b 00 	lds	r25, 0x007B
    13c8:	a0 91 7c 00 	lds	r26, 0x007C
    13cc:	b0 91 7d 00 	lds	r27, 0x007D
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	a1 1d       	adc	r26, r1
    13d4:	b1 1d       	adc	r27, r1
    13d6:	80 93 7a 00 	sts	0x007A, r24
    13da:	90 93 7b 00 	sts	0x007B, r25
    13de:	a0 93 7c 00 	sts	0x007C, r26
    13e2:	b0 93 7d 00 	sts	0x007D, r27
	SECONDS_T0_MC2 ++;
    13e6:	80 91 7e 00 	lds	r24, 0x007E
    13ea:	90 91 7f 00 	lds	r25, 0x007F
    13ee:	a0 91 80 00 	lds	r26, 0x0080
    13f2:	b0 91 81 00 	lds	r27, 0x0081
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	b1 1d       	adc	r27, r1
    13fc:	80 93 7e 00 	sts	0x007E, r24
    1400:	90 93 7f 00 	sts	0x007F, r25
    1404:	a0 93 80 00 	sts	0x0080, r26
    1408:	b0 93 81 00 	sts	0x0081, r27
	quarter_sec=0;
    140c:	10 92 75 00 	sts	0x0075, r1
    1410:	10 92 74 00 	sts	0x0074, r1
	}
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <buzzer_init>:
#include "buzzer.h"
#include "gpio.h"


void buzzer_init(void)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	66 e0       	ldi	r22, 0x06	; 6
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);									//PD6 AND PD7 OUTPUT PINS FOR THE BUZZER
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	67 e0       	ldi	r22, 0x07	; 7
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 1d 0b 	call	0x163a	; 0x163a <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	66 e0       	ldi	r22, 0x06	; 6
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);											// BY DEFAULT OUTPUT PINS ARE 0
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	67 e0       	ldi	r22, 0x07	; 7
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>


}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <buzzer_start>:


void buzzer_start(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62


	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	66 e0       	ldi	r22, 0x06	; 6
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	67 e0       	ldi	r22, 0x07	; 7
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>

}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <buzzer_stop>:


void buzzer_stop(void)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	66 e0       	ldi	r22, 0x06	; 6
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_writePin>

}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <EEPROM_init>:
#include "twi.h"



void EEPROM_init(void)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	28 97       	sbiw	r28, 0x08	; 8
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
	I2C_Config config= { PRESCALE_1, 2 , 2 }; 					//TWBR =2 AND ADDRESS = 2
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	9d 83       	std	Y+5, r25	; 0x05
    14a4:	8c 83       	std	Y+4, r24	; 0x04
    14a6:	e1 e7       	ldi	r30, 0x71	; 113
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	ff 83       	std	Y+7, r31	; 0x07
    14ac:	ee 83       	std	Y+6, r30	; 0x06
    14ae:	f3 e0       	ldi	r31, 0x03	; 3
    14b0:	f8 87       	std	Y+8, r31	; 0x08
    14b2:	ee 81       	ldd	r30, Y+6	; 0x06
    14b4:	ff 81       	ldd	r31, Y+7	; 0x07
    14b6:	00 80       	ld	r0, Z
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	9f 81       	ldd	r25, Y+7	; 0x07
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	9f 83       	std	Y+7, r25	; 0x07
    14c0:	8e 83       	std	Y+6, r24	; 0x06
    14c2:	ec 81       	ldd	r30, Y+4	; 0x04
    14c4:	fd 81       	ldd	r31, Y+5	; 0x05
    14c6:	00 82       	st	Z, r0
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	9d 83       	std	Y+5, r25	; 0x05
    14d0:	8c 83       	std	Y+4, r24	; 0x04
    14d2:	98 85       	ldd	r25, Y+8	; 0x08
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	98 87       	std	Y+8, r25	; 0x08
    14d8:	e8 85       	ldd	r30, Y+8	; 0x08
    14da:	ee 23       	and	r30, r30
    14dc:	51 f7       	brne	.-44     	; 0x14b2 <EEPROM_init+0x28>
	TWI_init( &config );
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_init>
}
    14e6:	28 96       	adiw	r28, 0x08	; 8
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <EEPROM_writeByte>:



uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <EEPROM_writeByte+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <EEPROM_writeByte+0x8>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    150a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    150e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    1512:	88 30       	cpi	r24, 0x08	; 8
    1514:	11 f0       	breq	.+4      	; 0x151a <EEPROM_writeByte+0x22>
        return ERROR;
    1516:	1c 82       	std	Y+4, r1	; 0x04
    1518:	28 c0       	rjmp	.+80     	; 0x156a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	80 70       	andi	r24, 0x00	; 0
    1520:	97 70       	andi	r25, 0x07	; 7
    1522:	88 0f       	add	r24, r24
    1524:	89 2f       	mov	r24, r25
    1526:	88 1f       	adc	r24, r24
    1528:	99 0b       	sbc	r25, r25
    152a:	91 95       	neg	r25
    152c:	80 6a       	ori	r24, 0xA0	; 160
    152e:	0e 94 14 10 	call	0x2028	; 0x2028 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1532:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    1536:	88 31       	cpi	r24, 0x18	; 24
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_writeByte+0x46>
        return ERROR; 
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	16 c0       	rjmp	.+44     	; 0x156a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	0e 94 14 10 	call	0x2028	; 0x2028 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1544:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    1548:	88 32       	cpi	r24, 0x28	; 40
    154a:	11 f0       	breq	.+4      	; 0x1550 <EEPROM_writeByte+0x58>
        return ERROR;
    154c:	1c 82       	std	Y+4, r1	; 0x04
    154e:	0d c0       	rjmp	.+26     	; 0x156a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	0e 94 14 10 	call	0x2028	; 0x2028 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1556:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    155a:	88 32       	cpi	r24, 0x28	; 40
    155c:	11 f0       	breq	.+4      	; 0x1562 <EEPROM_writeByte+0x6a>
        return ERROR;
    155e:	1c 82       	std	Y+4, r1	; 0x04
    1560:	04 c0       	rjmp	.+8      	; 0x156a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1562:	0e 94 09 10 	call	0x2012	; 0x2012 <TWI_stop>
	
    return SUCCESS;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	8c 83       	std	Y+4, r24	; 0x04
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <EEPROM_readByte+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <EEPROM_readByte+0x8>
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	7c 83       	std	Y+4, r23	; 0x04
    158e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1590:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1594:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	11 f0       	breq	.+4      	; 0x15a0 <EEPROM_readByte+0x26>
        return ERROR;
    159c:	1d 82       	std	Y+5, r1	; 0x05
    159e:	44 c0       	rjmp	.+136    	; 0x1628 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	80 70       	andi	r24, 0x00	; 0
    15a6:	97 70       	andi	r25, 0x07	; 7
    15a8:	88 0f       	add	r24, r24
    15aa:	89 2f       	mov	r24, r25
    15ac:	88 1f       	adc	r24, r24
    15ae:	99 0b       	sbc	r25, r25
    15b0:	91 95       	neg	r25
    15b2:	80 6a       	ori	r24, 0xA0	; 160
    15b4:	0e 94 14 10 	call	0x2028	; 0x2028 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15b8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    15bc:	88 31       	cpi	r24, 0x18	; 24
    15be:	11 f0       	breq	.+4      	; 0x15c4 <EEPROM_readByte+0x4a>
        return ERROR;
    15c0:	1d 82       	std	Y+5, r1	; 0x05
    15c2:	32 c0       	rjmp	.+100    	; 0x1628 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	0e 94 14 10 	call	0x2028	; 0x2028 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15ca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    15ce:	88 32       	cpi	r24, 0x28	; 40
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <EEPROM_readByte+0x5c>
        return ERROR;
    15d2:	1d 82       	std	Y+5, r1	; 0x05
    15d4:	29 c0       	rjmp	.+82     	; 0x1628 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15d6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15da:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    15de:	80 31       	cpi	r24, 0x10	; 16
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <EEPROM_readByte+0x6c>
        return ERROR;
    15e2:	1d 82       	std	Y+5, r1	; 0x05
    15e4:	21 c0       	rjmp	.+66     	; 0x1628 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	80 70       	andi	r24, 0x00	; 0
    15ec:	97 70       	andi	r25, 0x07	; 7
    15ee:	88 0f       	add	r24, r24
    15f0:	89 2f       	mov	r24, r25
    15f2:	88 1f       	adc	r24, r24
    15f4:	99 0b       	sbc	r25, r25
    15f6:	91 95       	neg	r25
    15f8:	81 6a       	ori	r24, 0xA1	; 161
    15fa:	0e 94 14 10 	call	0x2028	; 0x2028 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15fe:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    1602:	80 34       	cpi	r24, 0x40	; 64
    1604:	11 f0       	breq	.+4      	; 0x160a <EEPROM_readByte+0x90>
        return ERROR;
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    160a:	0e 94 3e 10 	call	0x207c	; 0x207c <TWI_readByteWithNACK>
    160e:	eb 81       	ldd	r30, Y+3	; 0x03
    1610:	fc 81       	ldd	r31, Y+4	; 0x04
    1612:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1614:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TWI_getStatus>
    1618:	88 35       	cpi	r24, 0x58	; 88
    161a:	11 f0       	breq	.+4      	; 0x1620 <EEPROM_readByte+0xa6>
        return ERROR;
    161c:	1d 82       	std	Y+5, r1	; 0x05
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1620:	0e 94 09 10 	call	0x2012	; 0x2012 <TWI_stop>

    return SUCCESS;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_setupPinDirection+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <GPIO_setupPinDirection+0x8>
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
    164c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	08 f0       	brcs	.+2      	; 0x1656 <GPIO_setupPinDirection+0x1c>
    1654:	d5 c0       	rjmp	.+426    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	08 f0       	brcs	.+2      	; 0x165e <GPIO_setupPinDirection+0x24>
    165c:	d1 c0       	rjmp	.+418    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3d 83       	std	Y+5, r19	; 0x05
    1666:	2c 83       	std	Y+4, r18	; 0x04
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <GPIO_setupPinDirection+0x3a>
    1672:	43 c0       	rjmp	.+134    	; 0x16fa <GPIO_setupPinDirection+0xc0>
    1674:	2c 81       	ldd	r18, Y+4	; 0x04
    1676:	3d 81       	ldd	r19, Y+5	; 0x05
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <GPIO_setupPinDirection+0x4e>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	71 f0       	breq	.+28     	; 0x16a2 <GPIO_setupPinDirection+0x68>
    1686:	bc c0       	rjmp	.+376    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
    1688:	2c 81       	ldd	r18, Y+4	; 0x04
    168a:	3d 81       	ldd	r19, Y+5	; 0x05
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <GPIO_setupPinDirection+0x5a>
    1692:	5f c0       	rjmp	.+190    	; 0x1752 <GPIO_setupPinDirection+0x118>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <GPIO_setupPinDirection+0x66>
    169e:	85 c0       	rjmp	.+266    	; 0x17aa <GPIO_setupPinDirection+0x170>
    16a0:	af c0       	rjmp	.+350    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	a1 f4       	brne	.+40     	; 0x16d0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16a8:	aa e3       	ldi	r26, 0x3A	; 58
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ea e3       	ldi	r30, 0x3A	; 58
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_setupPinDirection+0x8c>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_setupPinDirection+0x88>
    16ca:	84 2b       	or	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	98 c0       	rjmp	.+304    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16d0:	aa e3       	ldi	r26, 0x3A	; 58
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ea e3       	ldi	r30, 0x3A	; 58
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_setupPinDirection+0xb4>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_setupPinDirection+0xb0>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	83 c0       	rjmp	.+262    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1700:	a7 e3       	ldi	r26, 0x37	; 55
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e7 e3       	ldi	r30, 0x37	; 55
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_setupPinDirection+0xe4>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_setupPinDirection+0xe0>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	6c c0       	rjmp	.+216    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1728:	a7 e3       	ldi	r26, 0x37	; 55
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e7 e3       	ldi	r30, 0x37	; 55
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <GPIO_setupPinDirection+0x10c>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <GPIO_setupPinDirection+0x108>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	57 c0       	rjmp	.+174    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	a1 f4       	brne	.+40     	; 0x1780 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1758:	a4 e3       	ldi	r26, 0x34	; 52
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e4 e3       	ldi	r30, 0x34	; 52
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <GPIO_setupPinDirection+0x13c>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <GPIO_setupPinDirection+0x138>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	40 c0       	rjmp	.+128    	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1780:	a4 e3       	ldi	r26, 0x34	; 52
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e4 e3       	ldi	r30, 0x34	; 52
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <GPIO_setupPinDirection+0x164>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <GPIO_setupPinDirection+0x160>
    17a2:	80 95       	com	r24
    17a4:	84 23       	and	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	2b c0       	rjmp	.+86     	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	a1 f4       	brne	.+40     	; 0x17d8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17b0:	a1 e3       	ldi	r26, 0x31	; 49
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e1 e3       	ldi	r30, 0x31	; 49
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <GPIO_setupPinDirection+0x194>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <GPIO_setupPinDirection+0x190>
    17d2:	84 2b       	or	r24, r20
    17d4:	8c 93       	st	X, r24
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17d8:	a1 e3       	ldi	r26, 0x31	; 49
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e1 e3       	ldi	r30, 0x31	; 49
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 2e       	mov	r0, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <GPIO_setupPinDirection+0x1bc>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <GPIO_setupPinDirection+0x1b8>
    17fa:	80 95       	com	r24
    17fc:	84 23       	and	r24, r20
    17fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_writePin+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <GPIO_writePin+0x8>
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	6a 83       	std	Y+2, r22	; 0x02
    1822:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	88 30       	cpi	r24, 0x08	; 8
    1828:	08 f0       	brcs	.+2      	; 0x182c <GPIO_writePin+0x1c>
    182a:	d5 c0       	rjmp	.+426    	; 0x19d6 <GPIO_writePin+0x1c6>
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	08 f0       	brcs	.+2      	; 0x1834 <GPIO_writePin+0x24>
    1832:	d1 c0       	rjmp	.+418    	; 0x19d6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3d 83       	std	Y+5, r19	; 0x05
    183c:	2c 83       	std	Y+4, r18	; 0x04
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <GPIO_writePin+0x3a>
    1848:	43 c0       	rjmp	.+134    	; 0x18d0 <GPIO_writePin+0xc0>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <GPIO_writePin+0x4e>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	71 f0       	breq	.+28     	; 0x1878 <GPIO_writePin+0x68>
    185c:	bc c0       	rjmp	.+376    	; 0x19d6 <GPIO_writePin+0x1c6>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <GPIO_writePin+0x5a>
    1868:	5f c0       	rjmp	.+190    	; 0x1928 <GPIO_writePin+0x118>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <GPIO_writePin+0x66>
    1874:	85 c0       	rjmp	.+266    	; 0x1980 <GPIO_writePin+0x170>
    1876:	af c0       	rjmp	.+350    	; 0x19d6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	a1 f4       	brne	.+40     	; 0x18a6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    187e:	ab e3       	ldi	r26, 0x3B	; 59
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	eb e3       	ldi	r30, 0x3B	; 59
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_writePin+0x8c>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_writePin+0x88>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	98 c0       	rjmp	.+304    	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18a6:	ab e3       	ldi	r26, 0x3B	; 59
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GPIO_writePin+0xb4>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <GPIO_writePin+0xb0>
    18c8:	80 95       	com	r24
    18ca:	84 23       	and	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	83 c0       	rjmp	.+262    	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	a1 f4       	brne	.+40     	; 0x18fe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_writePin+0xe4>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_writePin+0xe0>
    18f8:	84 2b       	or	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	6c c0       	rjmp	.+216    	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18fe:	a8 e3       	ldi	r26, 0x38	; 56
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e8 e3       	ldi	r30, 0x38	; 56
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_writePin+0x10c>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_writePin+0x108>
    1920:	80 95       	com	r24
    1922:	84 23       	and	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	57 c0       	rjmp	.+174    	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	a1 f4       	brne	.+40     	; 0x1956 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    192e:	a5 e3       	ldi	r26, 0x35	; 53
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e3       	ldi	r30, 0x35	; 53
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_writePin+0x13c>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_writePin+0x138>
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	40 c0       	rjmp	.+128    	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1956:	a5 e3       	ldi	r26, 0x35	; 53
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e5 e3       	ldi	r30, 0x35	; 53
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <GPIO_writePin+0x164>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <GPIO_writePin+0x160>
    1978:	80 95       	com	r24
    197a:	84 23       	and	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	2b c0       	rjmp	.+86     	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	a1 f4       	brne	.+40     	; 0x19ae <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1986:	a2 e3       	ldi	r26, 0x32	; 50
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e2 e3       	ldi	r30, 0x32	; 50
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <GPIO_writePin+0x194>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <GPIO_writePin+0x190>
    19a8:	84 2b       	or	r24, r20
    19aa:	8c 93       	st	X, r24
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPIO_writePin+0x1bc>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <GPIO_writePin+0x1b8>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_readPin+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_readPin+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	8a 83       	std	Y+2, r24	; 0x02
    19f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19f8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	88 30       	cpi	r24, 0x08	; 8
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <GPIO_readPin+0x1c>
    1a00:	84 c0       	rjmp	.+264    	; 0x1b0a <GPIO_readPin+0x124>
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <GPIO_readPin+0x24>
    1a08:	80 c0       	rjmp	.+256    	; 0x1b0a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	4c 81       	ldd	r20, Y+4	; 0x04
    1a16:	5d 81       	ldd	r21, Y+5	; 0x05
    1a18:	41 30       	cpi	r20, 0x01	; 1
    1a1a:	51 05       	cpc	r21, r1
    1a1c:	79 f1       	breq	.+94     	; 0x1a7c <GPIO_readPin+0x96>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	91 05       	cpc	r25, r1
    1a26:	34 f4       	brge	.+12     	; 0x1a34 <GPIO_readPin+0x4e>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	21 15       	cp	r18, r1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	69 f0       	breq	.+26     	; 0x1a4c <GPIO_readPin+0x66>
    1a32:	6b c0       	rjmp	.+214    	; 0x1b0a <GPIO_readPin+0x124>
    1a34:	4c 81       	ldd	r20, Y+4	; 0x04
    1a36:	5d 81       	ldd	r21, Y+5	; 0x05
    1a38:	42 30       	cpi	r20, 0x02	; 2
    1a3a:	51 05       	cpc	r21, r1
    1a3c:	b9 f1       	breq	.+110    	; 0x1aac <GPIO_readPin+0xc6>
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	83 30       	cpi	r24, 0x03	; 3
    1a44:	91 05       	cpc	r25, r1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <GPIO_readPin+0x64>
    1a48:	49 c0       	rjmp	.+146    	; 0x1adc <GPIO_readPin+0xf6>
    1a4a:	5f c0       	rjmp	.+190    	; 0x1b0a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a4c:	e9 e3       	ldi	r30, 0x39	; 57
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a9 01       	movw	r20, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <GPIO_readPin+0x7e>
    1a60:	55 95       	asr	r21
    1a62:	47 95       	ror	r20
    1a64:	8a 95       	dec	r24
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <GPIO_readPin+0x7a>
    1a68:	ca 01       	movw	r24, r20
    1a6a:	81 70       	andi	r24, 0x01	; 1
    1a6c:	90 70       	andi	r25, 0x00	; 0
    1a6e:	88 23       	and	r24, r24
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	49 c0       	rjmp	.+146    	; 0x1b0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	47 c0       	rjmp	.+142    	; 0x1b0a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a7c:	e6 e3       	ldi	r30, 0x36	; 54
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <GPIO_readPin+0xae>
    1a90:	55 95       	asr	r21
    1a92:	47 95       	ror	r20
    1a94:	8a 95       	dec	r24
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <GPIO_readPin+0xaa>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	90 70       	andi	r25, 0x00	; 0
    1a9e:	88 23       	and	r24, r24
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	31 c0       	rjmp	.+98     	; 0x1b0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
    1aaa:	2f c0       	rjmp	.+94     	; 0x1b0a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1aac:	e3 e3       	ldi	r30, 0x33	; 51
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a9 01       	movw	r20, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <GPIO_readPin+0xde>
    1ac0:	55 95       	asr	r21
    1ac2:	47 95       	ror	r20
    1ac4:	8a 95       	dec	r24
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <GPIO_readPin+0xda>
    1ac8:	ca 01       	movw	r24, r20
    1aca:	81 70       	andi	r24, 0x01	; 1
    1acc:	90 70       	andi	r25, 0x00	; 0
    1ace:	88 23       	and	r24, r24
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	19 c0       	rjmp	.+50     	; 0x1b0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad8:	19 82       	std	Y+1, r1	; 0x01
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1adc:	e0 e3       	ldi	r30, 0x30	; 48
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a9 01       	movw	r20, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <GPIO_readPin+0x10e>
    1af0:	55 95       	asr	r21
    1af2:	47 95       	ror	r20
    1af4:	8a 95       	dec	r24
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <GPIO_readPin+0x10a>
    1af8:	ca 01       	movw	r24, r20
    1afa:	81 70       	andi	r24, 0x01	; 1
    1afc:	90 70       	andi	r25, 0x00	; 0
    1afe:	88 23       	and	r24, r24
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b08:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <GPIO_setupPortDirection+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <GPIO_setupPortDirection+0x8>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	90 f5       	brcc	.+100    	; 0x1b96 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3c 83       	std	Y+4, r19	; 0x04
    1b3a:	2b 83       	std	Y+3, r18	; 0x03
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	91 05       	cpc	r25, r1
    1b44:	d1 f0       	breq	.+52     	; 0x1b7a <GPIO_setupPortDirection+0x5e>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <GPIO_setupPortDirection+0x3e>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	61 f0       	breq	.+24     	; 0x1b70 <GPIO_setupPortDirection+0x54>
    1b58:	1e c0       	rjmp	.+60     	; 0x1b96 <GPIO_setupPortDirection+0x7a>
    1b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	81 f0       	breq	.+32     	; 0x1b84 <GPIO_setupPortDirection+0x68>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	81 f0       	breq	.+32     	; 0x1b8e <GPIO_setupPortDirection+0x72>
    1b6e:	13 c0       	rjmp	.+38     	; 0x1b96 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b70:	ea e3       	ldi	r30, 0x3A	; 58
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	80 83       	st	Z, r24
    1b78:	0e c0       	rjmp	.+28     	; 0x1b96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b7a:	e7 e3       	ldi	r30, 0x37	; 55
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	80 83       	st	Z, r24
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b84:	e4 e3       	ldi	r30, 0x34	; 52
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	80 83       	st	Z, r24
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b8e:	e1 e3       	ldi	r30, 0x31	; 49
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <GPIO_writePort+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <GPIO_writePort+0x8>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	84 30       	cpi	r24, 0x04	; 4
    1bb8:	90 f5       	brcc	.+100    	; 0x1c1e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3c 83       	std	Y+4, r19	; 0x04
    1bc2:	2b 83       	std	Y+3, r18	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	91 05       	cpc	r25, r1
    1bcc:	d1 f0       	breq	.+52     	; 0x1c02 <GPIO_writePort+0x5e>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <GPIO_writePort+0x3e>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <GPIO_writePort+0x54>
    1be0:	1e c0       	rjmp	.+60     	; 0x1c1e <GPIO_writePort+0x7a>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	81 f0       	breq	.+32     	; 0x1c0c <GPIO_writePort+0x68>
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <GPIO_writePort+0x72>
    1bf6:	13 c0       	rjmp	.+38     	; 0x1c1e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bf8:	eb e3       	ldi	r30, 0x3B	; 59
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	80 83       	st	Z, r24
    1c00:	0e c0       	rjmp	.+28     	; 0x1c1e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c02:	e8 e3       	ldi	r30, 0x38	; 56
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	80 83       	st	Z, r24
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	80 83       	st	Z, r24
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c16:	e2 e3       	ldi	r30, 0x32	; 50
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <GPIO_readPort+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <GPIO_readPort+0x8>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c3a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	90 f5       	brcc	.+100    	; 0x1ca6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3c 83       	std	Y+4, r19	; 0x04
    1c4a:	2b 83       	std	Y+3, r18	; 0x03
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	91 05       	cpc	r25, r1
    1c54:	d1 f0       	breq	.+52     	; 0x1c8a <GPIO_readPort+0x5e>
    1c56:	2b 81       	ldd	r18, Y+3	; 0x03
    1c58:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <GPIO_readPort+0x3e>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <GPIO_readPort+0x54>
    1c68:	1e c0       	rjmp	.+60     	; 0x1ca6 <GPIO_readPort+0x7a>
    1c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	81 f0       	breq	.+32     	; 0x1c94 <GPIO_readPort+0x68>
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	81 f0       	breq	.+32     	; 0x1c9e <GPIO_readPort+0x72>
    1c7e:	13 c0       	rjmp	.+38     	; 0x1ca6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c80:	e9 e3       	ldi	r30, 0x39	; 57
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c8a:	e6 e3       	ldi	r30, 0x36	; 54
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c94:	e3 e3       	ldi	r30, 0x33	; 51
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <MOTOR_init>:

/**************************************Functions Definitions******************************************/


void MOTOR_init(void)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
	/* A , B Outputs of MICROCONTROLLER */
	SET_BIT(MOTOR_PORT_DIR,A);
    1cbe:	a4 e3       	ldi	r26, 0x34	; 52
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e4 e3       	ldi	r30, 0x34	; 52
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 62       	ori	r24, 0x20	; 32
    1cca:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_DIR,B);
    1ccc:	a4 e3       	ldi	r26, 0x34	; 52
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e4 e3       	ldi	r30, 0x34	; 52
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	80 64       	ori	r24, 0x40	; 64
    1cd8:	8c 93       	st	X, r24

	/* Motor Moves clockwise by default */
//	MOTOR_clockw;
}
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <__vector_9>:
/*ISR (TIMER0_OVF_vect)   { 	   SECONDS_T0_MC1 ++; SECONDS_T0_MC2 ++;    }

ISR (TIMER0_COMP_vect)  {		SECONDS_T0_MC1 ++; SECONDS_T0_MC2 ++;	  }
*/
ISR(TIMER0_OVF_vect)
{
    1ce0:	1f 92       	push	r1
    1ce2:	0f 92       	push	r0
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	0f 92       	push	r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	2f 93       	push	r18
    1cec:	3f 93       	push	r19
    1cee:	4f 93       	push	r20
    1cf0:	5f 93       	push	r21
    1cf2:	6f 93       	push	r22
    1cf4:	7f 93       	push	r23
    1cf6:	8f 93       	push	r24
    1cf8:	9f 93       	push	r25
    1cfa:	af 93       	push	r26
    1cfc:	bf 93       	push	r27
    1cfe:	ef 93       	push	r30
    1d00:	ff 93       	push	r31
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	//TCNT0 = g_initial_value ;
	if(g_callBackPtr != NULL_PTR)
    1d0a:	80 91 82 00 	lds	r24, 0x0082
    1d0e:	90 91 83 00 	lds	r25, 0x0083
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	29 f0       	breq	.+10     	; 0x1d20 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1d16:	e0 91 82 00 	lds	r30, 0x0082
    1d1a:	f0 91 83 00 	lds	r31, 0x0083
    1d1e:	09 95       	icall
	}
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	bf 91       	pop	r27
    1d2a:	af 91       	pop	r26
    1d2c:	9f 91       	pop	r25
    1d2e:	8f 91       	pop	r24
    1d30:	7f 91       	pop	r23
    1d32:	6f 91       	pop	r22
    1d34:	5f 91       	pop	r21
    1d36:	4f 91       	pop	r20
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1d46:	1f 92       	push	r1
    1d48:	0f 92       	push	r0
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	0f 92       	push	r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	2f 93       	push	r18
    1d52:	3f 93       	push	r19
    1d54:	4f 93       	push	r20
    1d56:	5f 93       	push	r21
    1d58:	6f 93       	push	r22
    1d5a:	7f 93       	push	r23
    1d5c:	8f 93       	push	r24
    1d5e:	9f 93       	push	r25
    1d60:	af 93       	push	r26
    1d62:	bf 93       	push	r27
    1d64:	ef 93       	push	r30
    1d66:	ff 93       	push	r31
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d70:	80 91 82 00 	lds	r24, 0x0082
    1d74:	90 91 83 00 	lds	r25, 0x0083
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <__vector_19+0x40>
	{
		(*g_callBackPtr)();
    1d7c:	e0 91 82 00 	lds	r30, 0x0082
    1d80:	f0 91 83 00 	lds	r31, 0x0083
    1d84:	09 95       	icall
	}
}
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	ff 91       	pop	r31
    1d8c:	ef 91       	pop	r30
    1d8e:	bf 91       	pop	r27
    1d90:	af 91       	pop	r26
    1d92:	9f 91       	pop	r25
    1d94:	8f 91       	pop	r24
    1d96:	7f 91       	pop	r23
    1d98:	6f 91       	pop	r22
    1d9a:	5f 91       	pop	r21
    1d9c:	4f 91       	pop	r20
    1d9e:	3f 91       	pop	r19
    1da0:	2f 91       	pop	r18
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <Timer0_init>:

/*******************************************************************************
 *                       Function Definition                           *
 *******************************************************************************/
void Timer0_init(const TimerConfig  *configuration){
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <Timer0_init+0x6>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = ((TCCR0 & ~0x07) | configuration->clock);  //ADJUSTS PRESCALAR BITS
    1dba:	a3 e5       	ldi	r26, 0x53	; 83
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e3 e5       	ldi	r30, 0x53	; 83
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	98 7f       	andi	r25, 0xF8	; 248
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	81 81       	ldd	r24, Z+1	; 0x01
    1dce:	89 2b       	or	r24, r25
    1dd0:	8c 93       	st	X, r24
	TCCR0 = ((TCCR0 & ~0xC8) | configuration->mode);  //ADJUSTS MODE (FOC0,WGM00,WGM01 bits)
    1dd2:	a3 e5       	ldi	r26, 0x53	; 83
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e3 e5       	ldi	r30, 0x53	; 83
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	98 2f       	mov	r25, r24
    1dde:	97 73       	andi	r25, 0x37	; 55
    1de0:	e9 81       	ldd	r30, Y+1	; 0x01
    1de2:	fa 81       	ldd	r31, Y+2	; 0x02
    1de4:	80 81       	ld	r24, Z
    1de6:	89 2b       	or	r24, r25
    1de8:	8c 93       	st	X, r24
	TCNT0 = configuration->initial_value; // initial value for counting
    1dea:	a2 e5       	ldi	r26, 0x52	; 82
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e9 81       	ldd	r30, Y+1	; 0x01
    1df0:	fa 81       	ldd	r31, Y+2	; 0x02
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	8c 93       	st	X, r24

	if (configuration->mode == NORMAL)
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 38       	cpi	r24, 0x80	; 128
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <Timer0_init+0x64>
		{
			TIMSK|=(1<<TOIE0);							//TIMER OVERFLOW INTERRUPT ENABLE
    1e02:	a9 e5       	ldi	r26, 0x59	; 89
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e9 e5       	ldi	r30, 0x59	; 89
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	81 60       	ori	r24, 0x01	; 1
    1e0e:	8c 93       	st	X, r24
		}

		if (configuration->mode == CTC)
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	80 81       	ld	r24, Z
    1e16:	88 38       	cpi	r24, 0x88	; 136
    1e18:	71 f4       	brne	.+28     	; 0x1e36 <Timer0_init+0x8a>
		{
			TIMSK|=(1<<OCIE0);
    1e1a:	a9 e5       	ldi	r26, 0x59	; 89
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e9 e5       	ldi	r30, 0x59	; 89
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	82 60       	ori	r24, 0x02	; 2
    1e26:	8c 93       	st	X, r24
			OCR0= configuration->compare_value;        //SET COMPARE VALUE
    1e28:	ac e5       	ldi	r26, 0x5C	; 92
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	84 81       	ldd	r24, Z+4	; 0x04
    1e32:	95 81       	ldd	r25, Z+5	; 0x05
    1e34:	8c 93       	st	X, r24
		}
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <Timer0_deinit>:
void Timer0_deinit(){
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0; TCNT0=0; TIMSK &=~(1<<TOIE0) & ~(1<<OCIE0);
    1e48:	e3 e5       	ldi	r30, 0x53	; 83
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	10 82       	st	Z, r1
    1e4e:	e2 e5       	ldi	r30, 0x52	; 82
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	10 82       	st	Z, r1
    1e54:	a9 e5       	ldi	r26, 0x59	; 89
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e9 e5       	ldi	r30, 0x59	; 89
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8c 7f       	andi	r24, 0xFC	; 252
    1e60:	8c 93       	st	X, r24

}
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <Timer0_stop>:
void Timer0_stop(){
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & ~0x07);
    1e70:	a3 e5       	ldi	r26, 0x53	; 83
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e3 e5       	ldi	r30, 0x53	; 83
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	88 7f       	andi	r24, 0xF8	; 248
    1e7c:	8c 93       	st	X, r24
}
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <Timer1_init>:




void Timer1_init(const TimerConfig *configuration)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <Timer1_init+0x6>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & ~0x07) | configuration->clock; //ADJUSTS PRESACALAR BITS
    1e92:	ae e4       	ldi	r26, 0x4E	; 78
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ee e4       	ldi	r30, 0x4E	; 78
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	98 7f       	andi	r25, 0xF8	; 248
    1ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea4:	81 81       	ldd	r24, Z+1	; 0x01
    1ea6:	89 2b       	or	r24, r25
    1ea8:	8c 93       	st	X, r24

	TCCR1B = (TCCR1B & ~0x08) | (configuration->mode); //FOR WGM12 IF CTC MODE 1 / NORMAL MODE 0
    1eaa:	ae e4       	ldi	r26, 0x4E	; 78
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ee e4       	ldi	r30, 0x4E	; 78
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	97 7f       	andi	r25, 0xF7	; 247
    1eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eba:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 2b       	or	r24, r25
    1ec0:	8c 93       	st	X, r24

	TCCR1A = (1<<FOC1A);  							  //TIMER1 ONLY SUPPORTS CTC MODE AND NORMAL MODE
    1ec2:	ef e4       	ldi	r30, 0x4F	; 79
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	88 e0       	ldi	r24, 0x08	; 8
    1ec8:	80 83       	st	Z, r24

    TCNT1 = configuration->initial_value;
    1eca:	ac e4       	ldi	r26, 0x4C	; 76
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24

	if (configuration->mode == NORMAL)
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 38       	cpi	r24, 0x80	; 128
    1ee4:	39 f4       	brne	.+14     	; 0x1ef4 <Timer1_init+0x70>
	{
		TIMSK|=(1<<TOIE1);							//TIMER OVERFLOW INTERRUPT ENABLE
    1ee6:	a9 e5       	ldi	r26, 0x59	; 89
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e5       	ldi	r30, 0x59	; 89
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	84 60       	ori	r24, 0x04	; 4
    1ef2:	8c 93       	st	X, r24
	}

	if (configuration->mode == CTC)
    1ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 38       	cpi	r24, 0x88	; 136
    1efc:	81 f4       	brne	.+32     	; 0x1f1e <Timer1_init+0x9a>
	{
		OCR1A= configuration->compare_value;        //SET COMPARE VALUE
    1efe:	aa e4       	ldi	r26, 0x4A	; 74
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	84 81       	ldd	r24, Z+4	; 0x04
    1f08:	95 81       	ldd	r25, Z+5	; 0x05
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    1f10:	a9 e5       	ldi	r26, 0x59	; 89
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e9 e5       	ldi	r30, 0x59	; 89
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 61       	ori	r24, 0x10	; 16
    1f1c:	8c 93       	st	X, r24
	}
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <Timer1_deinit>:

void Timer1_deinit()
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0; TCCR1A=0; TCNT0=0; TIMSK &=~(1<<TOIE1) & ~(1<<OCIE1A);
    1f30:	ee e4       	ldi	r30, 0x4E	; 78
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	10 82       	st	Z, r1
    1f36:	ef e4       	ldi	r30, 0x4F	; 79
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	10 82       	st	Z, r1
    1f3c:	e2 e5       	ldi	r30, 0x52	; 82
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	10 82       	st	Z, r1
    1f42:	a9 e5       	ldi	r26, 0x59	; 89
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e9 e5       	ldi	r30, 0x59	; 89
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8b 7e       	andi	r24, 0xEB	; 235
    1f4e:	8c 93       	st	X, r24
}
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <Timer1_stop>:



void Timer1_stop()
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & ~0x07);
    1f5e:	ae e4       	ldi	r26, 0x4E	; 78
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ee e4       	ldi	r30, 0x4E	; 78
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	88 7f       	andi	r24, 0xF8	; 248
    1f6a:	8c 93       	st	X, r24
}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <Timer0_setCallBack>:


void Timer0_setCallBack(void(*a_ptr)(void))
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <Timer0_setCallBack+0x6>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	90 93 83 00 	sts	0x0083, r25
    1f88:	80 93 82 00 	sts	0x0082, r24
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_Config *configuration)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <TWI_init+0x6>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01

	TWBR = configuration->BitRate;
    1fa4:	a0 e2       	ldi	r26, 0x20	; 32
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1faa:	fa 81       	ldd	r31, Y+2	; 0x02
    1fac:	81 81       	ldd	r24, Z+1	; 0x01
    1fae:	8c 93       	st	X, r24
    TWSR |= ( (TWSR & ~ 0X03) | configuration->clock );			 //ADJUSTS PRESCALE
    1fb0:	a1 e2       	ldi	r26, 0x21	; 33
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e1 e2       	ldi	r30, 0x21	; 33
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	28 2f       	mov	r18, r24
    1fbc:	e1 e2       	ldi	r30, 0x21	; 33
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	9c 7f       	andi	r25, 0xFC	; 252
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	80 81       	ld	r24, Z
    1fcc:	89 2b       	or	r24, r25
    1fce:	82 2b       	or	r24, r18
    1fd0:	8c 93       	st	X, r24
	
    TWAR = 	  (~0X01 & configuration->slave_address );			//SLAVE ADDRESS FROM BIT 1 TO BIT 7
    1fd2:	a2 e2       	ldi	r26, 0x22	; 34
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	8e 7f       	andi	r24, 0xFE	; 254
    1fde:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1fe0:	e6 e5       	ldi	r30, 0x56	; 86
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	80 83       	st	Z, r24
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <TWI_start>:

void TWI_start(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ffa:	e6 e5       	ldi	r30, 0x56	; 86
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	84 ea       	ldi	r24, 0xA4	; 164
    2000:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2002:	e6 e5       	ldi	r30, 0x56	; 86
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 23       	and	r24, r24
    200a:	dc f7       	brge	.-10     	; 0x2002 <TWI_start+0x10>
}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <TWI_stop>:

void TWI_stop(void)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    201a:	e6 e5       	ldi	r30, 0x56	; 86
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	84 e9       	ldi	r24, 0x94	; 148
    2020:	80 83       	st	Z, r24
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	0f 92       	push	r0
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2034:	e3 e2       	ldi	r30, 0x23	; 35
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    203c:	e6 e5       	ldi	r30, 0x56	; 86
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	84 e8       	ldi	r24, 0x84	; 132
    2042:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2044:	e6 e5       	ldi	r30, 0x56	; 86
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 23       	and	r24, r24
    204c:	dc f7       	brge	.-10     	; 0x2044 <TWI_writeByte+0x1c>
}
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    205e:	e6 e5       	ldi	r30, 0x56	; 86
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	84 ec       	ldi	r24, 0xC4	; 196
    2064:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2066:	e6 e5       	ldi	r30, 0x56	; 86
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 23       	and	r24, r24
    206e:	dc f7       	brge	.-10     	; 0x2066 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2070:	e3 e2       	ldi	r30, 0x23	; 35
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
}
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2084:	e6 e5       	ldi	r30, 0x56	; 86
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	84 e8       	ldi	r24, 0x84	; 132
    208a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    208c:	e6 e5       	ldi	r30, 0x56	; 86
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	88 23       	and	r24, r24
    2094:	dc f7       	brge	.-10     	; 0x208c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2096:	e3 e2       	ldi	r30, 0x23	; 35
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	0f 92       	push	r0
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    20ac:	e1 e2       	ldi	r30, 0x21	; 33
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	88 7f       	andi	r24, 0xF8	; 248
    20b4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <UART_init>:

#define BAUD_PRESCALE_U2X (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)      // 8 -> DOUBLE SPEED ASYNCHRONOUS
#define BAUD_PRESCALE_SYNCH (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  // 16 -> ASYNCHRONOUS

void UART_init( UART_Config *config )
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <UART_init+0x6>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
	/*  UCSRB REGISTER
	 *  RXC,TXC,UDR INTERRUPT ENABLE = 0,  T/R DATA BIT 8 = 0
	 */

	UCSRB|= (1<<RXEN) | (1<<TXEN) ;    // TRANSMITER ENABLE AND RECIEVER ENABLE
    20ce:	aa e2       	ldi	r26, 0x2A	; 42
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ea e2       	ldi	r30, 0x2A	; 42
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	88 61       	ori	r24, 0x18	; 24
    20da:	8c 93       	st	X, r24
	/* UCSRC REGISTER
	 * USBS=0 -> 1 STOP BIT
	 * UPM0 =0 ,UPM1=1 -> EVEN PARITY BIT
	 */

	UCSRC|= (1<<URSEL); // SELECTING UCSRC BY SETTING 1 TO 'URSEL'
    20dc:	a0 e4       	ldi	r26, 0x40	; 64
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e0 e4       	ldi	r30, 0x40	; 64
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 68       	ori	r24, 0x80	; 128
    20e8:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);   //CHARCTER SIZE 8 BITS IN FRAME TRANSFERED
    20ea:	a0 e4       	ldi	r26, 0x40	; 64
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e0 e4       	ldi	r30, 0x40	; 64
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	86 60       	ori	r24, 0x06	; 6
    20f6:	8c 93       	st	X, r24

	UCSRC|= ( (config->ParityBits) << 4); //CHOOSE PARITY BITS
    20f8:	a0 e4       	ldi	r26, 0x40	; 64
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e0 e4       	ldi	r30, 0x40	; 64
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	28 2f       	mov	r18, r24
    2104:	e9 81       	ldd	r30, Y+1	; 0x01
    2106:	fa 81       	ldd	r31, Y+2	; 0x02
    2108:	81 81       	ldd	r24, Z+1	; 0x01
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	82 95       	swap	r24
    2110:	92 95       	swap	r25
    2112:	90 7f       	andi	r25, 0xF0	; 240
    2114:	98 27       	eor	r25, r24
    2116:	80 7f       	andi	r24, 0xF0	; 240
    2118:	98 27       	eor	r25, r24
    211a:	82 2b       	or	r24, r18
    211c:	8c 93       	st	X, r24



		if (config->mode) //1 IF SYNCH
    211e:	e9 81       	ldd	r30, Y+1	; 0x01
    2120:	fa 81       	ldd	r31, Y+2	; 0x02
    2122:	80 81       	ld	r24, Z
    2124:	88 23       	and	r24, r24
    2126:	29 f1       	breq	.+74     	; 0x2172 <UART_init+0xb2>
		{
			UCSRC |= ((config->mode) << 6);  // SYNCHRONOUS OPERATION
    2128:	a0 e4       	ldi	r26, 0x40	; 64
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e0 e4       	ldi	r30, 0x40	; 64
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	28 2f       	mov	r18, r24
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	80 81       	ld	r24, Z
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	00 24       	eor	r0, r0
    2140:	96 95       	lsr	r25
    2142:	87 95       	ror	r24
    2144:	07 94       	ror	r0
    2146:	96 95       	lsr	r25
    2148:	87 95       	ror	r24
    214a:	07 94       	ror	r0
    214c:	98 2f       	mov	r25, r24
    214e:	80 2d       	mov	r24, r0
    2150:	82 2b       	or	r24, r18
    2152:	8c 93       	st	X, r24

			UCSRC |= (1<<UCPOL); // DATA TRANSMITTED ON FALLING EDGE , AND SAMPLED ON POSITIVE EDGE
    2154:	a0 e4       	ldi	r26, 0x40	; 64
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 e4       	ldi	r30, 0x40	; 64
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	81 60       	ori	r24, 0x01	; 1
    2160:	8c 93       	st	X, r24

			UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    2162:	e0 e4       	ldi	r30, 0x40	; 64
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_SYNCH;
    2168:	e9 e2       	ldi	r30, 0x29	; 41
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	85 e0       	ldi	r24, 0x05	; 5
    216e:	80 83       	st	Z, r24
    2170:	25 c0       	rjmp	.+74     	; 0x21bc <UART_init+0xfc>
		}

		else
		{							/* UMSEL =0 -> ASYNCHRONOUS OPERATION
		 	 	 	 	 	 	 	 * U2X =1 DOUBLE TRANSMISSION SPEED FOR ASYNCHRONOUS */
			UCSRC &= ~((config->mode) << 6);
    2172:	a0 e4       	ldi	r26, 0x40	; 64
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e0 e4       	ldi	r30, 0x40	; 64
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	28 2f       	mov	r18, r24
    217e:	e9 81       	ldd	r30, Y+1	; 0x01
    2180:	fa 81       	ldd	r31, Y+2	; 0x02
    2182:	80 81       	ld	r24, Z
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	00 24       	eor	r0, r0
    218a:	96 95       	lsr	r25
    218c:	87 95       	ror	r24
    218e:	07 94       	ror	r0
    2190:	96 95       	lsr	r25
    2192:	87 95       	ror	r24
    2194:	07 94       	ror	r0
    2196:	98 2f       	mov	r25, r24
    2198:	80 2d       	mov	r24, r0
    219a:	80 95       	com	r24
    219c:	82 23       	and	r24, r18
    219e:	8c 93       	st	X, r24
			UCSRA |= (1<<U2X);
    21a0:	ab e2       	ldi	r26, 0x2B	; 43
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	eb e2       	ldi	r30, 0x2B	; 43
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	8c 93       	st	X, r24
			UBRRH = (BAUD_PRESCALE_U2X>>8);
    21ae:	e0 e4       	ldi	r30, 0x40	; 64
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_U2X;
    21b4:	e9 e2       	ldi	r30, 0x29	; 41
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	8c e0       	ldi	r24, 0x0C	; 12
    21ba:	80 83       	st	Z, r24
		}
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	0f 92       	push	r0
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    21d2:	eb e2       	ldi	r30, 0x2B	; 43
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	80 72       	andi	r24, 0x20	; 32
    21de:	90 70       	andi	r25, 0x00	; 0
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	b9 f3       	breq	.-18     	; 0x21d2 <UART_sendByte+0xc>
	UDR=data;
    21e4:	ec e2       	ldi	r30, 0x2C	; 44
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	80 83       	st	Z, r24
}
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    21fc:	eb e2       	ldi	r30, 0x2B	; 43
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 23       	and	r24, r24
    2204:	dc f7       	brge	.-10     	; 0x21fc <UART_receiveByte+0x8>
	return UDR;
    2206:	ec e2       	ldi	r30, 0x2C	; 44
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <UART_sendString>:

void UART_sendString(const char *str)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <UART_sendString+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	0e c0       	rjmp	.+28     	; 0x2242 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	fc 01       	movw	r30, r24
    2232:	e2 0f       	add	r30, r18
    2234:	f3 1f       	adc	r31, r19
    2236:	80 81       	ld	r24, Z
    2238:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <UART_sendByte>
		i++;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	80 81       	ld	r24, Z
    2254:	88 23       	and	r24, r24
    2256:	39 f7       	brne	.-50     	; 0x2226 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <UART_receiveString>:

void UART_receiveString(char *str)
{
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <UART_receiveString+0xa>
    226e:	0f 92       	push	r0
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9b 83       	std	Y+3, r25	; 0x03
    2276:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2278:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	9b 81       	ldd	r25, Y+3	; 0x03
    2284:	8c 01       	movw	r16, r24
    2286:	02 0f       	add	r16, r18
    2288:	13 1f       	adc	r17, r19
    228a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <UART_receiveByte>
    228e:	f8 01       	movw	r30, r16
    2290:	80 83       	st	Z, r24
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <UART_receiveString+0x4e>
	while(str[i] != '#')   // keep receiving until #
	{
		i++;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	8f 5f       	subi	r24, 0xFF	; 255
    2298:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	8c 01       	movw	r16, r24
    22a6:	02 0f       	add	r16, r18
    22a8:	13 1f       	adc	r17, r19
    22aa:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <UART_receiveByte>
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24

void UART_receiveString(char *str)
{
	uint8 i = 0;
	str[i] = UART_receiveByte();
	while(str[i] != '#')   // keep receiving until #
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9b 81       	ldd	r25, Y+3	; 0x03
    22bc:	fc 01       	movw	r30, r24
    22be:	e2 0f       	add	r30, r18
    22c0:	f3 1f       	adc	r31, r19
    22c2:	80 81       	ld	r24, Z
    22c4:	83 32       	cpi	r24, 0x23	; 35
    22c6:	31 f7       	brne	.-52     	; 0x2294 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}
	str[i] = '\0';
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	9b 81       	ldd	r25, Y+3	; 0x03
    22d2:	fc 01       	movw	r30, r24
    22d4:	e2 0f       	add	r30, r18
    22d6:	f3 1f       	adc	r31, r19
    22d8:	10 82       	st	Z, r1
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	08 95       	ret

000022ea <__prologue_saves__>:
    22ea:	2f 92       	push	r2
    22ec:	3f 92       	push	r3
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	ca 1b       	sub	r28, r26
    2314:	db 0b       	sbc	r29, r27
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	09 94       	ijmp

00002322 <__epilogue_restores__>:
    2322:	2a 88       	ldd	r2, Y+18	; 0x12
    2324:	39 88       	ldd	r3, Y+17	; 0x11
    2326:	48 88       	ldd	r4, Y+16	; 0x10
    2328:	5f 84       	ldd	r5, Y+15	; 0x0f
    232a:	6e 84       	ldd	r6, Y+14	; 0x0e
    232c:	7d 84       	ldd	r7, Y+13	; 0x0d
    232e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2330:	9b 84       	ldd	r9, Y+11	; 0x0b
    2332:	aa 84       	ldd	r10, Y+10	; 0x0a
    2334:	b9 84       	ldd	r11, Y+9	; 0x09
    2336:	c8 84       	ldd	r12, Y+8	; 0x08
    2338:	df 80       	ldd	r13, Y+7	; 0x07
    233a:	ee 80       	ldd	r14, Y+6	; 0x06
    233c:	fd 80       	ldd	r15, Y+5	; 0x05
    233e:	0c 81       	ldd	r16, Y+4	; 0x04
    2340:	1b 81       	ldd	r17, Y+3	; 0x03
    2342:	aa 81       	ldd	r26, Y+2	; 0x02
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	ce 0f       	add	r28, r30
    2348:	d1 1d       	adc	r29, r1
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	ed 01       	movw	r28, r26
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
